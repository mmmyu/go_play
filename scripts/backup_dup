#!/bin/bash

backup_schema=rsync://marco@fatty/
gpg2_bin=/usr/bin/gpg2
declare datasets=("ssd /home/yumf")
dry_run=
tmpdir=
encrypt_key=4C4156643ACC79BE8DAC03F054640DB15410E3FE

if [[ "$1" == "syno" ]]; then
    shift
    backup_schema=file://
    gpg2_bin=/bin/gpg2
    encrypt_key=5410E3FE
    export PASSPHRASE='just 1 more backup'
    export TMPDIR=/volume1/extras/tmp
    declare datasets=(
	"accounts /volume1/homes/marco/yumf/doc/accounts"
	"tax /volume1/homes/marco/yumf/doc/tax"
#	"photo /volume1/homes/marco/photos")
	)
fi

backup_root=${backup_schema}/volume1/homes/marco/gdrive/backups

function one_backup() {
    local from_dir=$1
    local to_dir=$2
    duplicity --exclude-regexp '\.mozilla' \
	      --exclude-regexp '\.cache' \
              --exclude-regexp '\.thumbnails' \
              --asynchronous-upload \
	      --encrypt-key ${encrypt_key} \
	      --full-if-older-than 180D \
	      --use-agent \
	      --gpg-binary ${gpg2_bin} \
	      --volsize 1024 \
	      ${tmpdir} \
	      ${dry_run} \
	      ${from_dir} ${backup_root}/${to_dir}
}


function backup_all() {
    for d in "${datasets[@]}"; do
	echo $d | if read name path; then
	    echo "Backup ${name}"
	    one_backup $path $name
	fi
    done
}

function restore() {
    local source=$1
    local restore_dir=$2

    local file_flag=
    if [[ ${restore_dir} != "" ]]; then
	echo "Restore dir is ${restore_dir}"
	file_flag="--file-to-restore ${restore_dir}"
    fi
    if [[ ${source} = "" ]]; then
	echo "Source is {accounts,tax,ssd,photos}."
	exit
    fi
    local restore_target=./restore
    if ! mkdir restore; then
	echo "./restore dir already exists."
       	exit
    fi
    echo "Restoring from ${source} to ${restore_target}."
    duplicity restore --gpg-binary=${gpg2_bin} ${file_flag} ${backup_root}/${source} ${restore_target}
}

case "$1" in
    restore) shift; restore $@;;
    "") backup_all;;
esac
